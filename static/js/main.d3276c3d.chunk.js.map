{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextArea.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","class","type","role","word","text","toLowerCase","charAt","toUpperCase","slice","capitalise","message","data-bs-dismiss","aria-label","Navbar","className","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","aria-current","onClick","toggleMode","htmlFor","TextArea","useState","setText","color","heading","backgroundColor","rows","value","onChange","e","target","placeholder","console","log","myText","showAlert","split","count","final","map","cur","join","document","getElementById","select","navigator","clipboard","writeText","length","prototype","PropTypes","string","defaultProps","App","darkMode","setDarkMode","setAlert","setTimeout","body","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d3276c3d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalise = (word) =>{\r\n        let text = word.toLowerCase();\r\n        return text.charAt(0).toUpperCase() + text.slice(1);\r\n    }\r\n    \r\n    return (\r\n        <div style={{height:'50px'}}>\r\n        {props.alert &&\r\n        <div>\r\n            <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalise(props.alert.type)}</strong> {props.alert.message}\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\" ></button>\r\n            </div>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nNavbar.prototype = {\r\n    title: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps={\r\n    title: 'this is title'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextArea(props) {\r\n    const upCase = () =>{\r\n        console.log(\"This was fired\");\r\n        let myText = text.toUpperCase();\r\n        setText(myText);\r\n        props.showAlert(\"Your text was converted to uppercase\", \"success\");\r\n        \r\n    }\r\n    const lowCase = () =>{\r\n        console.log(\"LowCase Was fired\");\r\n        let myText = text.toLowerCase();\r\n        setText(myText);\r\n        props.showAlert(\"Your text was converted to lowercase\", \"success\");\r\n    }\r\n    \r\n    const clearText = () =>{\r\n        props.showAlert(\"Your text was cleared\", \"success\");\r\n        setText(\"\");\r\n    }\r\n\r\n    const handleOnChange = (e) =>{\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const altText = () =>{\r\n        let myText = text.split(\"\");\r\n        let count = 0;\r\n       \r\n        let final = myText.map((cur) =>{\r\n            // let a = (count % 2 === 0 ? cur.toUpperCase : cur.toLowerCase);\r\n            count++;\r\n            if(count % 2 !== 0)\r\n                return cur.toUpperCase();\r\n            else\r\n                return cur.toLowerCase();\r\n        })\r\n        props.showAlert(\"Your text was made alternative\", \"success\");\r\n        // let ans = myText.join(\"\");\r\n        setText(final.join(\"\"));\r\n    } \r\n    const copyText = () =>{\r\n        let text = document.getElementById(\"exampleFormControlTextarea1\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Your text was copied\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n    return (\r\n        <div>\r\n           \r\n           <div className=\"container\">\r\n           <div className=\"mb-3 my-5\">\r\n                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"><h3  style={{color: (props.mode === 'dark') ? 'white' : 'black' }}><strong>{props.heading}</strong></h3></label>\r\n                <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" style={{backgroundColor: (props.mode === 'light') ? 'white' : '#d6feff', color: 'black' }} rows=\"8\" value = {text} onChange={handleOnChange} placeholder=\"Start typing..\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={upCase}>Convert To UpperCase</button>\r\n            \r\n            <button className=\"btn btn-primary mx-2\" onClick={lowCase}>Convert To LowerCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={altText}>Alternating Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={copyText}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={clearText}>Clear Text</button>\r\n\r\n            </div> \r\n            \r\n            <div className=\"container my-3\">\r\n                <h2 style={{color: (props.mode === 'dark') ? 'white' : 'black' }}><b>Text Summary</b></h2>\r\n                <p style={{color: (props.mode === 'dark') ? 'white' : 'black' }}>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n                <p style={{color: (props.mode === 'dark') ? 'white' : 'black' }}>{0.008*text.split(\" \").length} Minutes Read</p>\r\n\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h2 style={{color: (props.mode === 'dark') ? 'white' : 'black' }}>\r\n                    Preview\r\n                    <br />\r\n                    \r\n                </h2>\r\n                <p className=\"area\" style={{color: (props.mode === 'dark') ? 'white' : 'black'}}>\r\n                {text}\r\n                </p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\n\r\n\r\nimport './App.css';\r\n// import About from './components/About';\r\nimport Alert from './components/Alert';\r\nimport Navbar from './components/Navbar';\r\nimport TextArea from './components/TextArea';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  \r\n} from \"react-router-dom\";\r\nfunction App() {\r\n  const [darkMode, setDarkMode] = useState(\"light\");\r\n\r\n  const toggleMode = () =>{\r\n    if(darkMode === 'light'){\r\n      setDarkMode('dark');\r\n      document.body.style.backgroundColor = '#212529';\r\n      showAlert(\"Dark Mode enabled\", \"success\")\r\n    } else{\r\n      setDarkMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light Mode enabled\", \"success\")\r\n    }\r\n  }\r\n  const [alert, setAlert] = useState(null);\r\n  const showAlert = (message, type) =>{\r\n    setAlert({\r\n      message:message,\r\n      type: type\r\n    })\r\n    setTimeout(() =>{\r\n      setAlert(null);\r\n    }, 1500)\r\n  }\r\n  return (\r\n    <>\r\n    \r\n    <div>\r\n    \r\n    <Router>\r\n    <Navbar title=\"Text Utils\" mode={darkMode} toggleMode={toggleMode}/>\r\n    <Alert alert = {alert}/>\r\n      <Routes>\r\n          {/* <Route exact path=\"/about\" element={<About />}/> */}\r\n            \r\n          \r\n          <Route exact path=\"/\" element={ <TextArea heading=\"Enter Your Text Below\" mode={darkMode} showAlert = {showAlert}/>}/>\r\n         \r\n          {/* <TextArea heading=\"Enter Your Text Below\" mode={darkMode} showAlert = {showAlert}/> */}\r\n      </Routes>\r\n    </Router>\r\n    \r\n    </div>\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}